component vtc20 "MAZAK VTC-20 glue logic";
author "Dmitry Yurtaev dmitry@yurtaev.com";
license "GPL";

// ATC

pin in  bit open	"open ATC cover";
pin in  bit close	"close ATC cover";

pin in  bit atc-cover-is-open	"X06-atc-cover-is-open";
pin in  bit atc-cover-closed	"X07-atc-cover-closed";
pin out bit atc-open-cover	"Y1B-atc-open-cover";
pin out bit atc-close-cover	"Y1C-atc-close-cover";

pin in  bit extend	"extend the magazine";
pin in  bit retract	"retract the magazine";
pin out bit extended;
pin out bit retracted;

pin in  bit mag1-extend-stop	"X00-mag1-extend-stop";
pin in  bit mag1-extended	"X02-mag1-extended";
pin in  bit mag1-retracted	"X03-mag1-retracted";
pin in  bit mag1-retract-stop	"X01-mag1-retract-stop";
pin out bit mag1-extend		"Y12-mag1-extend";
pin out bit mag1-retract	"Y14-mag1-retract";

pin in  bit unclamp	"unclamp tool";
pin in  bit clamp	"clamp tool";
pin in  bit unclamp2	"unclamp tool";
pin in  bit clamp2	"clamp tool";

pin in  bit spindle-zero-speed	"nyx.0.servo-05.zero-speed";
pin in  bit tool-clamped	"X10-tool-clamped";
pin in  bit tool-unclamped	"X11-tool-unclamped";
pin out bit tool-clamp		"Y11-tool-clamp";
pin out bit tool-unclamp	"Y10-tool-unclamp";

pin in float mode	"cimr inverter mode";
pin out bit mag1-mode-0		"Y37-mag1-mode-0";
pin out bit mag1-mode-1		"Y38-mag1-mode-1";
pin out bit mag1-mode-2		"Y39-mag1-mode-2";

pin in float station	"commanded carousel position";
pin out bit mag1-sta-0		"Y30-mag1-sta-0";
pin out bit mag1-sta-1		"Y31-mag1-sta-1";
pin out bit mag1-sta-2		"Y32-mag1-sta-2";
pin out bit mag1-sta-3		"Y33-mag1-sta-3";
pin out bit mag1-sta-4		"Y34-mag1-sta-4";

pin out s32 posi	"current carousel position";
pin out float pos	"current carousel position";
pin in  bit mag1-pos-0		"X30-mag1-pos-0";
pin in  bit mag1-pos-1		"X31-mag1-pos-1";
pin in  bit mag1-pos-2		"X32-mag1-pos-2";
pin in  bit mag1-pos-3		"X33-mag1-pos-3";
pin in  bit mag1-pos-4		"X34-mag1-ps-4";

variable int stati;
variable int modi;

////////////////////////////////////////////////////////

function _;
;;

#include <rtapi_math.h>

atc_open_cover  =  open && !close && !atc_cover_is_open;
atc_close_cover = close &&  !open && !atc_cover_closed && !mag1_extended && mag1_retracted;

extended     = mag1_extend_stop && mag1_extended;
retracted    = mag1_retract_stop && mag1_retracted;
mag1_extend  =  extend && !retract && !extended && atc_cover_is_open;
mag1_retract = retract &&  !extend && !retracted;

tool_unclamp = (unclamp || unclamp2) && spindle_zero_speed &&   !(clamp || clamp2)   && !tool_unclamped;
tool_clamp =     (clamp || clamp2)   && spindle_zero_speed && !(unclamp || unclamp2) && !tool_clamped;

modi = floor(mode + 0.5);
mag1_mode_0 = (modi & 1) != 0;
mag1_mode_1 = (modi & 2) != 0;
mag1_mode_2 = (modi & 4) != 0;

stati = floor(station + 0.5);
mag1_sta_0 = (stati & 1) != 0;
mag1_sta_1 = (stati & 2) != 0;
mag1_sta_2 = (stati & 4) != 0;
mag1_sta_3 = (stati & 8) != 0;
mag1_sta_4 = (stati & 16) != 0;

posi =
	(mag1_pos_0 ? 1 : 0) |
	(mag1_pos_1 ? 2 : 0) |
	(mag1_pos_2 ? 4 : 0) |
	(mag1_pos_3 ? 8 : 0) |
	(mag1_pos_4 ? 16 : 0);
pos = posi;

#define CIMR_MODE_JOG      0
#define CIMR_MODE_SETUP    1
#define CIMR_MODE_ZRN      2
#define CIMR_MODE_ZRN_OFFS 3
#define CIMR_MODE_AUTO     4
#define CIMR_MODE_MANUAL   5

// mode	0	jog
//	1	setup
//	2	zero return
//	3	zero offset
//	4 	automatic
//	5	manual
